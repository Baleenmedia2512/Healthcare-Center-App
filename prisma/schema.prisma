generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id             String   @id @default(cuid())
  name           String
  address        String
  contactEmail   String
  contactPhone   String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  logoUrl        String?
  faviconUrl     String?
  primaryColor   String?  @default("#84c9ef")
  secondaryColor String?  @default("#b4d2ed")
  customCss      String?
  customDomain   String?  @unique
  branches       Branch[]
  users          User[]

  @@map("clinics")
}

model Branch {
  id           String    @id @default(cuid())
  name         String
  address      String
  contactEmail String
  contactPhone String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  clinicId     String
  clinic       Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patients     Patient[]
  users        User[]

  @@index([clinicId], map: "branches_clinicId_fkey")
  @@map("branches")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  fullName       String?
  role           String    @default("doctor")
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  clinicId       String?
  branchId       String?
  patients       Patient[]
  branch         Branch?   @relation(fields: [branchId], references: [id])
  clinic         Clinic?   @relation(fields: [clinicId], references: [id])

  @@index([branchId], map: "users_branchId_fkey")
  @@index([clinicId], map: "users_clinicId_fkey")
  @@map("users")
}

model Patient {
  id               String          @id @default(cuid())
  name             String
  guardianName     String?
  address          String
  age              Int
  sex              String
  occupation       String?
  mobileNumber     String
  chiefComplaints  String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  medicalHistory   String?         @db.Text
  physicalGenerals String?         @db.Text
  menstrualHistory String?         @db.Text
  foodAndHabit     String?         @db.Text
  userId           String
  branchId         String
  investigations   Investigation[]
  branch           Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([branchId], map: "patients_branchId_fkey")
  @@index([userId], map: "patients_userId_fkey")
  @@map("patients")
}

model Investigation {
  id             String    @id @default(cuid())
  type           String
  details        String
  date           DateTime
  fileUrl        String?
  doctor         String?
  results        String?
  normalRange    String?
  followUpNeeded Boolean?  @default(false)
  followUpDate   DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  patientId      String
  patient        Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId], map: "investigations_patientId_fkey")
  @@map("investigations")
}
